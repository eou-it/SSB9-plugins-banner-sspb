{
   "constantName": "pbadm.ExportPagesExt",
   "extendsPage": {"constantName": "pbadm.ExportPages"},
   "modelView": {
      "baseRoot": "pbadmExportPages",
      "deltaVersion": "1.0",
      "deltas": {
         "markAll": {
            "valueStyle": {"ext": "primary"},
            "onClick": {"ext": "$pageGrid.$data.forEach(\n   function (data, index) {\n      data.exportPage = 1;\n       $pageGrid.$setModified(data); // Using undocumented method\n   }\n);"},
            "meta": {"ext": {
               "parent": "ShowPages",
               "nextSibling": "pageGrid"
            }},
            "name": {"ext": "markAll"},
            "label": {"ext": "Select all for export"},
            "type": {"ext": "button"}
         },
         "pageGrid": {
            "onClick": {"ext": ""},
            "onSave": {"ext": "var exportDone = false; // return false use the default save handler\nif ($exportTarget == 'C')  {\n\tvar count = 0;\n\tfunction getOne(data, index) {\n\t\tif (data.exportPage) {\n\t\t\t$pageId=data.constantName;\n\t\t\t$pageExport.$get();\n\t\t\tcount++;\n\t\t}\n\t}\n\t$pageGrid.$data.forEach( getOne);\n\tconsole.log(\"Started download of\",count,\" files.\");\n\texportDone = true; // well, it is kicked off - the download is started asynch\n}\nreturn exportDone;"},
            "refreshDataLabel": {"ext": "Clear Selection"},
            "documentation": {
               "ext": "http://localhost:8080/BannerExtensibility/internalPb/pages/pbadm.ExportPages",
               "base": ""
            },
            "onLoad": {"ext": "//Clear internal array to bypass default behavior\n$pageGridDS.modified.removeAll();"},
            "pageSize": {
               "ext": 5,
               "base": 10
            }
         },
         "Intro": {"meta": {
            "ext": {
               "parent": "ShowPages",
               "nextSibling": "exportTarget"
            },
            "base": {
               "parent": "ShowPages",
               "nextSibling": "pageGrid"
            }
         }},
         "pbadmExportPages": {
            "_name": {
               "ext": "pbadmExportPagesExt",
               "base": "pbadmExportPages"
            },
            "style": {"ext": ""},
            "importCSS": {"ext": "xeStyle"}
         },
         "downloadLink": {
            "onClick": {"ext": "console.log(item);\nconsole.log(\"from link\");\n$pageId=item.constantName;\n$pageExport.$get();"},
            "meta": {"ext": {"parent": "pageGrid"}},
            "name": {"ext": "downloadLink"},
            "description": {"ext": "Click to download this page"},
            "label": {"ext": "Download"},
            "type": {"ext": "link"},
            "replaceView": {"ext": true},
            "url": {"ext": ""}
         },
         "exportTarget": {
            "sourceParameters": {"ext": {}},
            "meta": {"ext": {
               "parent": "ShowPages",
               "nextSibling": "markAll"
            }},
            "name": {"ext": "exportTarget"},
            "sourceModel": {"ext": "exportTargetRes"},
            "label": {"ext": "Export Target"},
            "loadInitially": {"ext": true},
            "labelKey": {"ext": "description"},
            "type": {"ext": "radio"},
            "valueKey": {"ext": "code"},
            "value": {"ext": "C"},
            "required": {"ext": false}
         },
         "ApplyFiltered": {
            "onClick": {"base": "$pageResource.$post(\n  {constantName:$pageFilter, exportPage:1},\n  null, /*params*/\n   function(response) { alert('Exported filtered pages', {flash: true}) }, \n   function(response) {alert( \"Failed exporting pages \", {type:\"error\"})}\n);"},
            "meta": {"base": {"parent": "SelectPageBlock"}},
            "name": {"base": "ApplyFiltered"},
            "label": {"base": "Export all filtered pages"},
            "type": {"base": "button"}
         },
         "pageExport": {
            "onError": {"ext": "var msg;  \nif (response.data.errors.errorMessage) {\n  msg = response.data.errors.errorMessage;\n} else if (response.data.errors[0].errorMessage) {\n  msg=response.data.errors[0].errorMessage;\n} else {\n  msg=response.statusText;\n}\nalert(msg,{type:\"error\"});"},
            "meta": {"ext": {
               "parent": "_root",
               "nextSibling": "SelectPageBlock"
            }},
            "documentation": {"ext": "This object is being used to get the page object definition from the PageExport service."},
            "name": {"ext": "pageExport"},
            "onLoad": {"ext": "function download(p){\n    if(!p) return;\n    var theAnchor = $('<a />')\n        .attr('href', p.header+p.data)\n        .attr('download', p.fileName)\n        // Firefox does not fires click if the link is outside\n        // the DOM\n        .appendTo('body');\n    \n    theAnchor[0].click(); \n    theAnchor.remove();\n}\n\n//Define keys to remove using + to avoid replacement with PB variables\nvar keys={};\nkeys[ \"$\"+\"resolved\"]= true;\nkeys[\"$\"+\"$\"+\"hashKey\"]= true;\nkeys[\"$\"+\"promise\"]=true;\n\n// remove additional properties added by Angular resource when pretty print page source\nfunction jsonFilter(key, value) {\n    return keys[key]?undefined:value;\n}\n\n\nif (data && data.constantName){\n    var params = {\n          fileName: 'pages.'+data.constantName+'.json',\n          header: 'data:text/csv;charset=utf8,',\n          data: encodeURIComponent(JSON.stringify(data,jsonFilter,3))\n    };\n    download(params);\n} else {\n    alert('Unable to save data - unexpected format.');\n}"},
            "model": {"ext": "pageResource.modelView"},
            "loadInitially": {"ext": false},
            "type": {"ext": "data"},
            "parameters": {"ext": {"id": "$pageId"}}
         },
         "pageFilter": {
            "meta": {
               "ext": {"parent": "SelectPageBlock"},
               "base": {
                  "parent": "SelectPageBlock",
                  "nextSibling": "ApplyFiltered"
               }
            },
            "onUpdate": {
               "ext": "var cnt = 1000;\nif ($pageGridDS.pageSize!=cnt) {\n  $pageGridDS.pageSize=cnt;\n  $pageGridDS.pagingOptions.pageSizes[0]=cnt;\n  $pageGridDS.pagingOptions.pageSize=cnt;\n  $pageGridDS.pagingOptions.currentPage=1;\n}\n$pageGrid.$load();",
               "base": "$pageGrid.$load();"
            },
            "value": {"ext": ""}
         },
         "export": {"meta": {
            "ext": {
               "parent": "pageGrid",
               "nextSibling": "downloadLink"
            },
            "base": {"parent": "pageGrid"}
         }},
         "exportTargetRes": {
            "meta": {"ext": {
               "parent": "_root",
               "nextSibling": "pageExport"
            }},
            "name": {"ext": "exportTargetRes"},
            "type": {"ext": "resource"},
            "staticData": {"ext": [
               {
                  "code": "S",
                  "description": "Server FS"
               },
               {
                  "code": "C",
                  "description": "Download to client"
               }
            ]}
         },
         "pageResource": {"meta": {
            "ext": {
               "parent": "_root",
               "nextSibling": "exportTargetRes"
            },
            "base": {
               "parent": "_root",
               "nextSibling": "SelectPageBlock"
            }
         }}
      }
   },
   "fileTimestamp": "2016-10-31T17:32:20Z",
   "pageRoles": [{
      "allow": true,
      "roleName": "ADMIN-GPBADMN"
   }]
}