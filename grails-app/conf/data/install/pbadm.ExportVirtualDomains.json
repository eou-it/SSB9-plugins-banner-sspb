{
   "constantName": "pbadm.ExportVirtualDomains",
   "extendsPage": {"constantName": "pbadm.ExportBase"},
   "modelView": {
      "baseRoot": "pbadmExportBase",
      "deltaVersion": "1.0",
      "deltas": {
         "ShowForm": {"label": {
            "ext": "Filtered Virtual Domains",
            "base": "Filtered Objects"
         }},
         "markAll": {"onClick": {
            "ext": "$exportGrid.$data.forEach(\n   function (data, index) {\n      data.exportVirtualDomain = 1;\n       $exportGrid.$setModified(data); // Using undocumented method\n   }\n);",
            "patch": "--- original\n+++ revised\n@@ -1,5 +1,5 @@\n $exportGrid.$data.forEach(\n    function (data, index) {\n-      data.exportobject = 1;\n+      data.exportVirtualDomain = 1;\n        $exportGrid.$setModified(data); // Using undocumented method\n    }",
            "base": "$exportGrid.$data.forEach(\n   function (data, index) {\n      data.exportobject = 1;\n       $exportGrid.$setModified(data); // Using undocumented method\n   }\n);"
         }},
         "exportGrid": {
            "onSave": {
               "ext": "var exportDone = false; // return false use the default save handler\nif ($exportTarget == 'C')  {\n\tvar count = 0;\n\tfunction getOne(data, index) {\n\t\tif (data.exportVirtualDomain) {\n\t\t\t$exportId=data.serviceName;\n\t\t\t$getExport.$get();\n\t\t\tcount++;\n\t\t}\n\t}\n\t$exportGrid.$data.forEach( getOne);\n\tconsole.log(\"Started download of\",count,\" files.\");\n\texportDone = true; // well, it is kicked off - the download is started asynch\n}\nreturn exportDone;",
               "patch": "--- original\n+++ revised\n@@ -3,5 +3,5 @@\n \tvar count = 0;\n \tfunction getOne(data, index) {\n-\t\tif (data.exportobject) {\n+\t\tif (data.exportVirtualDomain) {\n \t\t\t$exportId=data.serviceName;\n \t\t\t$getExport.$get();",
               "base": "var exportDone = false; // return false use the default save handler\nif ($exportTarget == 'C')  {\n\tvar count = 0;\n\tfunction getOne(data, index) {\n\t\tif (data.exportobject) {\n\t\t\t$exportId=data.serviceName;\n\t\t\t$getExport.$get();\n\t\t\tcount++;\n\t\t}\n\t}\n\t$exportGrid.$data.forEach( getOne);\n\tconsole.log(\"Started download of\",count,\" files.\");\n\texportDone = true; // well, it is kicked off - the download is started asynch\n}\nreturn exportDone;"
            },
            "onSaveSuccess": {
               "ext": "if (response.exportVirtualDomain == \"1\") {\n  alert( \"Exported virtual domain: \" + response.serviceName, {flash: true});\n}",
               "patch": "--- original\n+++ revised\n@@ -1,3 +1,3 @@\n-if (response.exportobject == \"1\") {\n+if (response.exportVirtualDomain == \"1\") {\n   alert( \"Exported virtual domain: \" + response.serviceName, {flash: true});\n }",
               "base": "if (response.exportobject == \"1\") {\n  alert( \"Exported virtual domain: \" + response.serviceName, {flash: true});\n}"
            },
            "label": {
               "ext": "Virtual domains to export",
               "base": "Objects to export"
            }
         },
         "exportResource": {"resource": {
            "ext": "virtualdomainexports",
            "base": "objectexports"
         }},
         "getExport": {"onLoad": {
            "ext": "function download(p){\n    if(!p) return;\n    var theAnchor = $('<a />')\n        .attr('href', p.header+p.data)\n        .attr('download', p.fileName)\n        // Firefox does not fires click if the link is outside\n        // the DOM\n        .appendTo('body');\n    \n    theAnchor[0].click(); \n    theAnchor.remove();\n}\n\n//Define keys to remove using + to avoid replacement with PB variables\nvar keys={};\nkeys[ \"$\"+\"resolved\"]= true;\nkeys[\"$\"+\"$\"+\"hashKey\"]= true;\nkeys[\"$\"+\"promise\"]=true;\n\n// remove additional properties added by Angular resource when pretty print source\nfunction jsonFilter(key, value) {\n    return keys[key]?undefined:value;\n}\n\n\nif (data && data.serviceName){\n    var params = {\n          fileName: 'virtualDomains.'+data.serviceName+'.json',\n          header: 'data:text/csv;charset=utf8,',\n          data: encodeURIComponent(JSON.stringify(data,jsonFilter,3))\n    };\n    download(params);\n    alert(\"Exported virtual domain: \"+ data.serviceName,{flash: true});\n} else {\n    alert('Unable to save data - unexpected format.', {type:\"error\"});   \n}",
            "patch": "--- original\n+++ revised\n@@ -26,5 +26,5 @@\n if (data && data.serviceName){\n     var params = {\n-          fileName: 'objects.'+data.serviceName+'.json',\n+          fileName: 'virtualDomains.'+data.serviceName+'.json',\n           header: 'data:text/csv;charset=utf8,',\n           data: encodeURIComponent(JSON.stringify(data,jsonFilter,3))",
            "base": "function download(p){\n    if(!p) return;\n    var theAnchor = $('<a />')\n        .attr('href', p.header+p.data)\n        .attr('download', p.fileName)\n        // Firefox does not fires click if the link is outside\n        // the DOM\n        .appendTo('body');\n    \n    theAnchor[0].click(); \n    theAnchor.remove();\n}\n\n//Define keys to remove using + to avoid replacement with PB variables\nvar keys={};\nkeys[ \"$\"+\"resolved\"]= true;\nkeys[\"$\"+\"$\"+\"hashKey\"]= true;\nkeys[\"$\"+\"promise\"]=true;\n\n// remove additional properties added by Angular resource when pretty print source\nfunction jsonFilter(key, value) {\n    return keys[key]?undefined:value;\n}\n\n\nif (data && data.serviceName){\n    var params = {\n          fileName: 'objects.'+data.serviceName+'.json',\n          header: 'data:text/csv;charset=utf8,',\n          data: encodeURIComponent(JSON.stringify(data,jsonFilter,3))\n    };\n    download(params);\n    alert(\"Exported virtual domain: \"+ data.serviceName,{flash: true});\n} else {\n    alert('Unable to save data - unexpected format.', {type:\"error\"});   \n}"
         }},
         "pbadmExportBase": {
            "_name": {
               "ext": "pbadmExportVirtualDomains",
               "base": "pbadmExportBase"
            },
            "documentation": {
               "ext": "Export Virtual Domains",
               "base": "This page is the base for a number of export pages and contains common definitions"
            },
            "label": {
               "ext": "Export Virtual Domains",
               "base": "Export artifacts basepage"
            },
            "title": {
               "ext": "Export Virtual Domains",
               "base": "Export artifacts basepage"
            }
         },
         "export": {"model": {
            "ext": "exportVirtualDomain",
            "base": "exportobject"
         }}
      }
   },
   "fileTimestamp": "2016-11-01T12:00:00Z",
   "pageRoles": [{
      "allow": true,
      "roleName": "ADMIN-GPBADMN"
   }]
}