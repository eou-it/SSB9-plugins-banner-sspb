{
   "constantName": "pbadm.ExportPages",
   "developerSecurity": [],
   "extendsPage": {
      "constantName": "pbadm.ExportBase"
   },
   "fileTimestamp": "2021-01-27T03:30:08Z",
   "modelView": {
      "baseRoot": "pbadmExportBase",
      "deltaVersion": "1.0",
      "deltas": {
         "owner": {
            "label": {
               "ext": "Page Owner",
               "base": "owner"
            }
         },
         "ShowForm": {
            "label": {
               "ext": "Filtered pages",
               "base": "Filtered Objects"
            }
         },
         "exportResource": {
            "resource": {
               "ext": "pageexports",
               "base": "objectexports"
            }
         },
         "exportGrid": {
            "onSave": {
               "ext": "var exportDone = false; // return false use the default save handler\nif ($exportTarget == 'C')  {\n\tvar count = 0;\n\tfunction getOne(data, index) {\n\t\tif (data.export) {\n\t\t\t$exportId=data.constantName;\n                        $isAllowExportSecurity = data.isAllowExportDSPermission;\n\t\t\t$getExport.$get();\n\t\t\tcount++;\n\t\t}\n\t}\n\t$exportGrid.$data.forEach( getOne);\n\tconsole.log(\"Started download of\",count,\" files.\");\n\texportDone = true; // well, it is kicked off - the download is started asynch\n}\nreturn exportDone;",
               "patch": "--- original\n+++ revised\n@@ -4,6 +4,6 @@\n \tfunction getOne(data, index) {\n \t\tif (data.export) {\n-\t\t\t$exportId=data.serviceName;\n-                       $isAllowExportSecurity = data.isAllowExportDSPermission\n+\t\t\t$exportId=data.constantName;\n+                        $isAllowExportSecurity = data.isAllowExportDSPermission;\n \t\t\t$getExport.$get();\n \t\t\tcount++;",
               "base": "var exportDone = false; // return false use the default save handler\nif ($exportTarget == 'C')  {\n\tvar count = 0;\n\tfunction getOne(data, index) {\n\t\tif (data.export) {\n\t\t\t$exportId=data.serviceName;\n                       $isAllowExportSecurity = data.isAllowExportDSPermission\n\t\t\t$getExport.$get();\n\t\t\tcount++;\n\t\t}\n\t}\n\t$exportGrid.$data.forEach( getOne);\n\tconsole.log(\"Started download of\",count,\" files.\");\n\texportDone = true; // well, it is kicked off - the download is started asynch\n}\nreturn exportDone;"
            },
            "documentation": {
               "ext": "http://localhost:8080/BannerExtensibility/internalPb/pages/pbadm.ExportPages"
            },
            "onSaveSuccess": {
               "ext": "if (response.export == \"1\") {\n  alert( \"Exported page: \" + response.constantName, {flash: true});\n}",
               "patch": "--- original\n+++ revised\n@@ -1,3 +1,3 @@\n if (response.export == \"1\") {\n-  alert( \"Exported virtual domain: \" + response.serviceName, {flash: true});\n+  alert( \"Exported page: \" + response.constantName, {flash: true});\n }",
               "base": "if (response.export == \"1\") {\n  alert( \"Exported virtual domain: \" + response.serviceName, {flash: true});\n}"
            },
            "label": {
               "ext": "Pages to export",
               "base": "Objects to export"
            },
            "parameters": {
               "ext": {
                  "constantName": "$nameFilter"
               },
               "base": {
                  "pageLike": "$pageFilter",
                  "serviceName": "$nameFilter"
               }
            }
         },
         "getExport": {
            "onLoad": {
               "ext": "function download(p){\n    if(!p) return;\n    var blob = new Blob([decodeURIComponent(p.data)],{type: \"text/csv;charset=utf-8;\"});\n\nif (window.navigator.msSaveBlob) { // IE 10+\nwindow.navigator.msSaveBlob(blob, p.fileName)\n    } else {\n        var theAnchor = $('<a />')\n        .attr('href', p.header+p.data)\n        .attr('download', p.fileName)\n        .appendTo('body');\n    \n    theAnchor[0].click(); \n    theAnchor.remove();\n    }\n}\n\n//Define keys to remove using + to avoid replacement with PB variables\nvar keys={};\nkeys[ \"$\"+\"resolved\"]= true;\nkeys[\"$\"+\"$\"+\"hashKey\"]= true;\nkeys[\"$\"+\"promise\"]=true;\n\n// remove additional properties added by Angular resource when pretty print source\nfunction jsonFilter(key, value) {\n    return keys[key]?undefined:value;\n}\n\n\nif (data && data.constantName){\n\n    var params = {\n          fileName: 'pages.'+data.constantName+'.json',\n          header: 'data:text/csv;charset=utf8,',\n          data: encodeURIComponent(JSON.stringify(data,jsonFilter,3))\n    };\n    download(params);\n    alert(\"Exported pages: \"+ data.constantName,{flash: true});\n} else {\n    alert('Unable to save data - unexpected format.', {type:\"error\"});   \n}",
               "patch": "--- original\n+++ revised\n@@ -1,13 +1,17 @@\n function download(p){\n     if(!p) return;\n-    var theAnchor = $('<a />')\n+    var blob = new Blob([decodeURIComponent(p.data)],{type: \"text/csv;charset=utf-8;\"});\n+\n+if (window.navigator.msSaveBlob) { // IE 10+\n+window.navigator.msSaveBlob(blob, p.fileName)\n+    } else {\n+        var theAnchor = $('<a />')\n         .attr('href', p.header+p.data)\n         .attr('download', p.fileName)\n-        // Firefox does not fires click if the link is outside\n-        // the DOM\n         .appendTo('body');\n     \n     theAnchor[0].click(); \n     theAnchor.remove();\n+    }\n }\n \n@@ -24,12 +28,13 @@\n \n \n-if (data && data.serviceName){\n+if (data && data.constantName){\n+\n     var params = {\n-          fileName: 'objects.'+data.serviceName+'.json',\n+          fileName: 'pages.'+data.constantName+'.json',\n           header: 'data:text/csv;charset=utf8,',\n           data: encodeURIComponent(JSON.stringify(data,jsonFilter,3))\n     };\n     download(params);\n-    alert(\"Exported virtual domain: \"+ data.serviceName,{flash: true});\n+    alert(\"Exported pages: \"+ data.constantName,{flash: true});\n } else {\n     alert('Unable to save data - unexpected format.', {type:\"error\"});   ",
               "base": "function download(p){\n    if(!p) return;\n    var theAnchor = $('<a />')\n        .attr('href', p.header+p.data)\n        .attr('download', p.fileName)\n        // Firefox does not fires click if the link is outside\n        // the DOM\n        .appendTo('body');\n    \n    theAnchor[0].click(); \n    theAnchor.remove();\n}\n\n//Define keys to remove using + to avoid replacement with PB variables\nvar keys={};\nkeys[ \"$\"+\"resolved\"]= true;\nkeys[\"$\"+\"$\"+\"hashKey\"]= true;\nkeys[\"$\"+\"promise\"]=true;\n\n// remove additional properties added by Angular resource when pretty print source\nfunction jsonFilter(key, value) {\n    return keys[key]?undefined:value;\n}\n\n\nif (data && data.serviceName){\n    var params = {\n          fileName: 'objects.'+data.serviceName+'.json',\n          header: 'data:text/csv;charset=utf8,',\n          data: encodeURIComponent(JSON.stringify(data,jsonFilter,3))\n    };\n    download(params);\n    alert(\"Exported virtual domain: \"+ data.serviceName,{flash: true});\n} else {\n    alert('Unable to save data - unexpected format.', {type:\"error\"});   \n}"
            },
            "model": {
               "ext": "exportResource.modelView",
               "base": "exportResource.serviceName"
            }
         },
         "pageFilter": {
            "label": {
               "base": "Used by page like"
            },
            "loadInitially": {
               "base": false
            },
            "type": {
               "base": "text"
            },
            "required": {
               "base": false
            },
            "readonly": {
               "base": false
            },
            "meta": {
               "base": {
                  "parent": "SelectBlock"
               }
            },
            "name": {
               "base": "pageFilter"
            },
            "model": {
               "base": ""
            },
            "placeholder": {
               "base": "Page..."
            },
            "onUpdate": {
               "base": "var cnt = 1000;\nif ($exportGridDS.pageSize!=cnt) {\n  $exportGridDS.pageSize=cnt;\n  $exportGridDS.pagingOptions.pageSizes[0]=cnt;\n  $exportGridDS.pagingOptions.pageSize=cnt;\n  $exportGridDS.pagingOptions.currentPage=1;\n}\n$exportGrid.$load();"
            },
            "parameters": {
               "base": {}
            },
            "value": {
               "base": ""
            },
            "validation": {
               "base": {}
            }
         },
         "pbadmExportBase": {
            "_name": {
               "ext": "pbadmExportPages",
               "base": "pbadmExportBase"
            },
            "documentation": {
               "ext": "Export Pages",
               "base": "This page is the base for a number of export pages and contains common definitions"
            },
            "label": {
               "ext": "Export Pages",
               "base": "Export artifacts basepage"
            },
            "title": {
               "ext": "Export Pages",
               "base": "Export artifacts basepage"
            }
         },
         "isAllowExportDSPermission": {
            "label": {
               "ext": "Export Current Permissions",
               "base": "isAllowExportDSPermission"
            }
         },
         "Intro": {
            "value": {
               "ext": "The table below shows the Page Builder pages matching the Page Filter above (use % (any character sequence) and _ (any character) as wild card). You can select the items you like to export and then press the Export Button.",
               "base": "The table below shows the Page Builder virtual domains matching the Virtual domain Filter above (use % (any character sequence) and _ (any character) as wild card). You can select the items you like to export and then press the Export Button."
            }
         },
         "SelectBlock": {
            "role": {
               "ext": "search"
            }
         },
         "downloadLink": {
            "onClick": {
               "ext": "debugger; $exportId=item.constantName;$isAllowExportSecurity = item.isAllowExportDSPermission;$getExport.$get();",
               "patch": "--- original\n+++ revised\n@@ -1,3 +1,1 @@\n-$exportId=item.serviceName;\n-$isAllowExportSecurity=item.isAllowExportDSPermission;\n-$getExport.$get();\n+debugger; $exportId=item.constantName;$isAllowExportSecurity = item.isAllowExportDSPermission;$getExport.$get();",
               "base": "$exportId=item.serviceName;\n$isAllowExportSecurity=item.isAllowExportDSPermission;\n$getExport.$get();"
            },
            "description": {
               "ext": "Click to download this page",
               "base": "Click to download this virtual domain"
            },
            "url": {
               "ext": ""
            }
         },
         "id": {
            "model": {
               "ext": "constantName",
               "base": "serviceName"
            }
         },
         "nameFilter": {
            "meta": {
               "ext": {
                  "parent": "SelectBlock"
               },
               "base": {
                  "parent": "SelectBlock",
                  "nextSibling": "pageFilter"
               }
            },
            "value": {
               "ext": ""
            }
         }
      }
   },
   "owner": null,
   "pageRoles": [
      {
         "roleName": "ADMIN-GPBADMA",
         "allow": true
      },
      {
         "roleName": "ADMIN-GPBADMN",
         "allow": true
      }
   ]
}